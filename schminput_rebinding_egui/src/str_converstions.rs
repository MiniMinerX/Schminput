use std::borrow::Cow;

use bevy::{
    input::{keyboard::KeyCode, mouse::MouseButton},
    log::error,
};
use schminput::{
    gamepad::{GamepadBindingSource, GamepadHapticType}, ButtonInputBeheavior, InputAxis, InputAxisDirection,
};
pub(crate) fn gamepad_haptics_type_to_str(haptics: GamepadHapticType) -> &'static str {
    match haptics {
        GamepadHapticType::Strong => "Strong",
        GamepadHapticType::Weak => "Weak",
    }
}
pub(crate) fn str_to_gamepad_haptics_type(str: &str) -> Option<GamepadHapticType> {
    Some(match str {
        "Weak" => GamepadHapticType::Weak,
        "Strong" => GamepadHapticType::Strong,
        _ => return None,
    })
}
pub(crate) fn button_behavior_to_str(behavior: ButtonInputBeheavior) -> &'static str {
    match behavior {
        ButtonInputBeheavior::JustPressed => "JustPressed",
        ButtonInputBeheavior::Pressed => "Pressed",
        ButtonInputBeheavior::JustReleased => "JustReleased",
    }
}
pub(crate) fn str_to_button_behavior(str: &str) -> Option<ButtonInputBeheavior> {
    Some(match str {
        "JustPressed" => ButtonInputBeheavior::JustPressed,
        "Pressed" => ButtonInputBeheavior::Pressed,
        "JustReleased" => ButtonInputBeheavior::JustReleased,
        _ => return None,
    })
}
pub(crate) fn mouse_button_to_cow_str(button: MouseButton) -> Cow<'static, str> {
    match button {
        MouseButton::Left => "Left",
        MouseButton::Right => "Right",
        MouseButton::Middle => "Middle",
        MouseButton::Back => "Back",
        MouseButton::Forward => "Forward",
        MouseButton::Other(v) => return v.to_string().into(),
    }
    .into()
}
pub(crate) fn str_to_mouse_button(str: &str) -> Option<MouseButton> {
    Some(match str {
        "Left" => MouseButton::Left,
        "Right" => MouseButton::Right,
        "Middle" => MouseButton::Middle,
        "Back" => MouseButton::Back,
        "Forward" => MouseButton::Forward,
        v => {
            return v.parse().ok().map(MouseButton::Other);
        }
    })
}
pub(crate) fn input_axis_dir_to_str(axis: InputAxisDirection) -> &'static str {
    match axis {
        InputAxisDirection::Positive => "+",
        InputAxisDirection::Negative => "-",
    }
}
pub(crate) fn str_to_input_axis_dir(str: &str) -> Option<InputAxisDirection> {
    Some(match str {
        "+" => InputAxisDirection::Positive,
        "-" => InputAxisDirection::Negative,
        _ => return None,
    })
}
pub(crate) fn input_axis_to_str(axis: InputAxis) -> &'static str {
    match axis {
        InputAxis::X => "X",
        InputAxis::Y => "Y",
    }
}
pub(crate) fn str_to_input_axis(str: &str) -> Option<InputAxis> {
    Some(match str {
        "X" => InputAxis::X,
        "Y" => InputAxis::Y,
        _ => return None,
    })
}
pub(crate) fn gamepad_binding_source_to_cow_str(source: GamepadBindingSource) -> Cow<'static, str> {
    match source {
        GamepadBindingSource::LeftStickX => "LeftStickX",
        GamepadBindingSource::LeftStickY => "LeftStickY",
        GamepadBindingSource::RightStickX => "RightStickX",
        GamepadBindingSource::RightStickY => "RightStickY",
        GamepadBindingSource::South => "South",
        GamepadBindingSource::East => "East",
        GamepadBindingSource::North => "North",
        GamepadBindingSource::West => "West",
        GamepadBindingSource::LeftTrigger => "LeftTrigger",
        GamepadBindingSource::LeftSecondaryTrigger => "LeftSecondaryTrigger",
        GamepadBindingSource::RightTrigger => "RightTrigger",
        GamepadBindingSource::RightSecondaryTrigger => "RightSecondaryTrigger",
        GamepadBindingSource::LeftStickClick => "LeftStickClick",
        GamepadBindingSource::RightStickClick => "RightStickClick",
        GamepadBindingSource::DPadUp => "DPadUp",
        GamepadBindingSource::DPadDown => "DPadDown",
        GamepadBindingSource::DPadLeft => "DPadLeft",
        GamepadBindingSource::DPadRight => "DPadRight",
        GamepadBindingSource::Select => "Select",
        GamepadBindingSource::Start => "Start",
        GamepadBindingSource::Mode => "Mode",

        GamepadBindingSource::LeftZ => "LeftZ",
        GamepadBindingSource::RightZ => "RightZ",
        GamepadBindingSource::C => "C",
        GamepadBindingSource::Z => "Z",
        GamepadBindingSource::OtherAxis(axis) => return format!("OtherAxis?{}", axis).into(),
        GamepadBindingSource::OtherButton(button) => {
            return format!("OtherButton?{}", button).into()
        }
    }
    .into()
}
pub(crate) fn str_to_gamepad_binding_source(str: &str) -> Option<GamepadBindingSource> {
    let source = match str {
        "LeftStickX" => GamepadBindingSource::LeftStickX,
        "LeftStickY" => GamepadBindingSource::LeftStickY,
        "RightStickX" => GamepadBindingSource::RightStickX,
        "RightStickY" => GamepadBindingSource::RightStickY,
        "South" => GamepadBindingSource::South,
        "East" => GamepadBindingSource::East,
        "North" => GamepadBindingSource::North,
        "West" => GamepadBindingSource::West,
        "LeftTrigger" => GamepadBindingSource::LeftTrigger,
        "LeftSecondaryTrigger" => GamepadBindingSource::LeftSecondaryTrigger,
        "RightTrigger" => GamepadBindingSource::RightTrigger,
        "RightSecondaryTrigger" => GamepadBindingSource::RightSecondaryTrigger,
        "LeftStickClick" => GamepadBindingSource::LeftStickClick,
        "RightStickClick" => GamepadBindingSource::RightStickClick,
        "DPadUp" => GamepadBindingSource::DPadUp,
        "DPadDown" => GamepadBindingSource::DPadDown,
        "DPadLeft" => GamepadBindingSource::DPadLeft,
        "DPadRight" => GamepadBindingSource::DPadRight,
        "Select" => GamepadBindingSource::Select,
        "Start" => GamepadBindingSource::Start,
        "Mode" => GamepadBindingSource::Mode,

        "LeftZ" => GamepadBindingSource::LeftZ,
        "RightZ" => GamepadBindingSource::RightZ,
        "C" => GamepadBindingSource::C,
        "Z" => GamepadBindingSource::Z,
        str if str.starts_with("OtherAxis?") => {
            let w = str.strip_prefix("OtherAxis?").unwrap();
            let Ok(axis) = w.parse() else {
                error!("unable to parce OtherAxis number: {}", str);
                return None;
            };
            GamepadBindingSource::OtherAxis(axis)
        }
        str if str.starts_with("OtherButton?") => {
            let w = str.strip_prefix("OtherButton?").unwrap();
            let Ok(button) = w.parse() else {
                error!("unable to parce OtherButton number: {}", str);
                return None;
            };
            GamepadBindingSource::OtherButton(button)
        }
        _ => return None,
    };
    Some(source)
}

pub(crate) fn key_code_to_str(key: &KeyCode) -> &'static str {
    match key {
        KeyCode::Unidentified(_) => "Unsupported",
        KeyCode::Backquote => "Backquote",
        KeyCode::Backslash => "Backslash",
        KeyCode::BracketLeft => "BracketLeft",
        KeyCode::BracketRight => "BracketRight",
        KeyCode::Comma => "Comma",
        KeyCode::Digit0 => "Digit0",
        KeyCode::Digit1 => "Digit1",
        KeyCode::Digit2 => "Digit2",
        KeyCode::Digit3 => "Digit3",
        KeyCode::Digit4 => "Digit4",
        KeyCode::Digit5 => "Digit5",
        KeyCode::Digit6 => "Digit6",
        KeyCode::Digit7 => "Digit7",
        KeyCode::Digit8 => "Digit8",
        KeyCode::Digit9 => "Digit9",
        KeyCode::Equal => "Equal",
        KeyCode::IntlBackslash => "IntlBackslash",
        KeyCode::IntlRo => "IntlRo",
        KeyCode::IntlYen => "IntlYen",
        KeyCode::KeyA => "KeyA",
        KeyCode::KeyB => "KeyB",
        KeyCode::KeyC => "KeyC",
        KeyCode::KeyD => "KeyD",
        KeyCode::KeyE => "KeyE",
        KeyCode::KeyF => "KeyF",
        KeyCode::KeyG => "KeyG",
        KeyCode::KeyH => "KeyH",
        KeyCode::KeyI => "KeyI",
        KeyCode::KeyJ => "KeyJ",
        KeyCode::KeyK => "KeyK",
        KeyCode::KeyL => "KeyL",
        KeyCode::KeyM => "KeyM",
        KeyCode::KeyN => "KeyN",
        KeyCode::KeyO => "KeyO",
        KeyCode::KeyP => "KeyP",
        KeyCode::KeyQ => "KeyQ",
        KeyCode::KeyR => "KeyR",
        KeyCode::KeyS => "KeyS",
        KeyCode::KeyT => "KeyT",
        KeyCode::KeyU => "KeyU",
        KeyCode::KeyV => "KeyV",
        KeyCode::KeyW => "KeyW",
        KeyCode::KeyX => "KeyX",
        KeyCode::KeyY => "KeyY",
        KeyCode::KeyZ => "KeyZ",
        KeyCode::Minus => "Minus",
        KeyCode::Period => "Period",
        KeyCode::Quote => "Quote",
        KeyCode::Semicolon => "Semicolon",
        KeyCode::Slash => "Slash",
        KeyCode::AltLeft => "AltLeft",
        KeyCode::AltRight => "AltRight",
        KeyCode::Backspace => "Backspace",
        KeyCode::CapsLock => "CapsLock",
        KeyCode::ContextMenu => "ContextMenu",
        KeyCode::ControlLeft => "ControlLeft",
        KeyCode::ControlRight => "ControlRight",
        KeyCode::Enter => "Enter",
        KeyCode::SuperLeft => "SuperLeft",
        KeyCode::SuperRight => "SuperRight",
        KeyCode::ShiftLeft => "ShiftLeft",
        KeyCode::ShiftRight => "ShiftRight",
        KeyCode::Space => "Space",
        KeyCode::Tab => "Tab",
        KeyCode::Convert => "Convert",
        KeyCode::KanaMode => "KanaMode",
        KeyCode::Lang1 => "Lang1",
        KeyCode::Lang2 => "Lang2",
        KeyCode::Lang3 => "Lang3",
        KeyCode::Lang4 => "Lang4",
        KeyCode::Lang5 => "Lang5",
        KeyCode::NonConvert => "NonConvert",
        KeyCode::Delete => "Delete",
        KeyCode::End => "End",
        KeyCode::Help => "Help",
        KeyCode::Home => "Home",
        KeyCode::Insert => "Insert",
        KeyCode::PageDown => "PageDown",
        KeyCode::PageUp => "PageUp",
        KeyCode::ArrowDown => "ArrowDown",
        KeyCode::ArrowLeft => "ArrowLeft",
        KeyCode::ArrowRight => "ArrowRight",
        KeyCode::ArrowUp => "ArrowUp",
        KeyCode::NumLock => "NumLock",
        KeyCode::Numpad0 => "Numpad0",
        KeyCode::Numpad1 => "Numpad1",
        KeyCode::Numpad2 => "Numpad2",
        KeyCode::Numpad3 => "Numpad3",
        KeyCode::Numpad4 => "Numpad4",
        KeyCode::Numpad5 => "Numpad5",
        KeyCode::Numpad6 => "Numpad6",
        KeyCode::Numpad7 => "Numpad7",
        KeyCode::Numpad8 => "Numpad8",
        KeyCode::Numpad9 => "Numpad9",
        KeyCode::NumpadAdd => "NumpadAdd",
        KeyCode::NumpadBackspace => "NumpadBackspace",
        KeyCode::NumpadClear => "NumpadClear",
        KeyCode::NumpadClearEntry => "NumpadClearEntry",
        KeyCode::NumpadComma => "NumpadComma",
        KeyCode::NumpadDecimal => "NumpadDecimal",
        KeyCode::NumpadDivide => "NumpadDivide",
        KeyCode::NumpadEnter => "NumpadEnter",
        KeyCode::NumpadEqual => "NumpadEqual",
        KeyCode::NumpadHash => "NumpadHash",
        KeyCode::NumpadMemoryAdd => "NumpadMemoryAdd",
        KeyCode::NumpadMemoryClear => "NumpadMemoryClear",
        KeyCode::NumpadMemoryRecall => "NumpadMemoryRecall",
        KeyCode::NumpadMemoryStore => "NumpadMemoryStore",
        KeyCode::NumpadMemorySubtract => "NumpadMemorySubtract",
        KeyCode::NumpadMultiply => "NumpadMultiply",
        KeyCode::NumpadParenLeft => "NumpadParenLeft",
        KeyCode::NumpadParenRight => "NumpadParenRight",
        KeyCode::NumpadStar => "NumpadStar",
        KeyCode::NumpadSubtract => "NumpadSubtract",
        KeyCode::Escape => "Escape",
        KeyCode::Fn => "Fn",
        KeyCode::FnLock => "FnLock",
        KeyCode::PrintScreen => "PrintScreen",
        KeyCode::ScrollLock => "ScrollLock",
        KeyCode::Pause => "Pause",
        KeyCode::BrowserBack => "BrowserBack",
        KeyCode::BrowserFavorites => "BrowserFavorites",
        KeyCode::BrowserForward => "BrowserForward",
        KeyCode::BrowserHome => "BrowserHome",
        KeyCode::BrowserRefresh => "BrowserRefresh",
        KeyCode::BrowserSearch => "BrowserSearch",
        KeyCode::BrowserStop => "BrowserStop",
        KeyCode::Eject => "Eject",
        KeyCode::LaunchApp1 => "LaunchApp1",
        KeyCode::LaunchApp2 => "LaunchApp2",
        KeyCode::LaunchMail => "LaunchMail",
        KeyCode::MediaPlayPause => "MediaPlayPause",
        KeyCode::MediaSelect => "MediaSelect",
        KeyCode::MediaStop => "MediaStop",
        KeyCode::MediaTrackNext => "MediaTrackNext",
        KeyCode::MediaTrackPrevious => "MediaTrackPrevious",
        KeyCode::Power => "Power",
        KeyCode::Sleep => "Sleep",
        KeyCode::AudioVolumeDown => "AudioVolumeDown",
        KeyCode::AudioVolumeMute => "AudioVolumeMute",
        KeyCode::AudioVolumeUp => "AudioVolumeUp",
        KeyCode::WakeUp => "WakeUp",
        KeyCode::Meta => "Meta",
        KeyCode::Hyper => "Hyper",
        KeyCode::Turbo => "Turbo",
        KeyCode::Abort => "Abort",
        KeyCode::Resume => "Resume",
        KeyCode::Suspend => "Suspend",
        KeyCode::Again => "Again",
        KeyCode::Copy => "Copy",
        KeyCode::Cut => "Cut",
        KeyCode::Find => "Find",
        KeyCode::Open => "Open",
        KeyCode::Paste => "Paste",
        KeyCode::Props => "Props",
        KeyCode::Select => "Select",
        KeyCode::Undo => "Undo",
        KeyCode::Hiragana => "Hiragana",
        KeyCode::Katakana => "Katakana",
        KeyCode::F1 => "F1",
        KeyCode::F2 => "F2",
        KeyCode::F3 => "F3",
        KeyCode::F4 => "F4",
        KeyCode::F5 => "F5",
        KeyCode::F6 => "F6",
        KeyCode::F7 => "F7",
        KeyCode::F8 => "F8",
        KeyCode::F9 => "F9",
        KeyCode::F10 => "F10",
        KeyCode::F11 => "F11",
        KeyCode::F12 => "F12",
        KeyCode::F13 => "F13",
        KeyCode::F14 => "F14",
        KeyCode::F15 => "F15",
        KeyCode::F16 => "F16",
        KeyCode::F17 => "F17",
        KeyCode::F18 => "F18",
        KeyCode::F19 => "F19",
        KeyCode::F20 => "F20",
        KeyCode::F21 => "F21",
        KeyCode::F22 => "F22",
        KeyCode::F23 => "F23",
        KeyCode::F24 => "F24",
        KeyCode::F25 => "F25",
        KeyCode::F26 => "F26",
        KeyCode::F27 => "F27",
        KeyCode::F28 => "F28",
        KeyCode::F29 => "F29",
        KeyCode::F30 => "F30",
        KeyCode::F31 => "F31",
        KeyCode::F32 => "F32",
        KeyCode::F33 => "F33",
        KeyCode::F34 => "F34",
        KeyCode::F35 => "F35",
    }
}
pub(crate) fn str_to_key_code(str: &str) -> Option<KeyCode> {
    let key = match str {
        "Backquote" => KeyCode::Backquote,
        "Backslash" => KeyCode::Backslash,
        "BracketLeft" => KeyCode::BracketLeft,
        "BracketRight" => KeyCode::BracketRight,
        "Comma" => KeyCode::Comma,
        "Digit0" => KeyCode::Digit0,
        "Digit1" => KeyCode::Digit1,
        "Digit2" => KeyCode::Digit2,
        "Digit3" => KeyCode::Digit3,
        "Digit4" => KeyCode::Digit4,
        "Digit5" => KeyCode::Digit5,
        "Digit6" => KeyCode::Digit6,
        "Digit7" => KeyCode::Digit7,
        "Digit8" => KeyCode::Digit8,
        "Digit9" => KeyCode::Digit9,
        "Equal" => KeyCode::Equal,
        "IntlBackslash" => KeyCode::IntlBackslash,
        "IntlRo" => KeyCode::IntlRo,
        "IntlYen" => KeyCode::IntlYen,
        "KeyA" => KeyCode::KeyA,
        "KeyB" => KeyCode::KeyB,
        "KeyC" => KeyCode::KeyC,
        "KeyD" => KeyCode::KeyD,
        "KeyE" => KeyCode::KeyE,
        "KeyF" => KeyCode::KeyF,
        "KeyG" => KeyCode::KeyG,
        "KeyH" => KeyCode::KeyH,
        "KeyI" => KeyCode::KeyI,
        "KeyJ" => KeyCode::KeyJ,
        "KeyK" => KeyCode::KeyK,
        "KeyL" => KeyCode::KeyL,
        "KeyM" => KeyCode::KeyM,
        "KeyN" => KeyCode::KeyN,
        "KeyO" => KeyCode::KeyO,
        "KeyP" => KeyCode::KeyP,
        "KeyQ" => KeyCode::KeyQ,
        "KeyR" => KeyCode::KeyR,
        "KeyS" => KeyCode::KeyS,
        "KeyT" => KeyCode::KeyT,
        "KeyU" => KeyCode::KeyU,
        "KeyV" => KeyCode::KeyV,
        "KeyW" => KeyCode::KeyW,
        "KeyX" => KeyCode::KeyX,
        "KeyY" => KeyCode::KeyY,
        "KeyZ" => KeyCode::KeyZ,
        "Minus" => KeyCode::Minus,
        "Period" => KeyCode::Period,
        "Quote" => KeyCode::Quote,
        "Semicolon" => KeyCode::Semicolon,
        "Slash" => KeyCode::Slash,
        "AltLeft" => KeyCode::AltLeft,
        "AltRight" => KeyCode::AltRight,
        "Backspace" => KeyCode::Backspace,
        "CapsLock" => KeyCode::CapsLock,
        "ContextMenu" => KeyCode::ContextMenu,
        "ControlLeft" => KeyCode::ControlLeft,
        "ControlRight" => KeyCode::ControlRight,
        "Enter" => KeyCode::Enter,
        "SuperLeft" => KeyCode::SuperLeft,
        "SuperRight" => KeyCode::SuperRight,
        "ShiftLeft" => KeyCode::ShiftLeft,
        "ShiftRight" => KeyCode::ShiftRight,
        "Space" => KeyCode::Space,
        "Tab" => KeyCode::Tab,
        "Convert" => KeyCode::Convert,
        "KanaMode" => KeyCode::KanaMode,
        "Lang1" => KeyCode::Lang1,
        "Lang2" => KeyCode::Lang2,
        "Lang3" => KeyCode::Lang3,
        "Lang4" => KeyCode::Lang4,
        "Lang5" => KeyCode::Lang5,
        "NonConvert" => KeyCode::NonConvert,
        "Delete" => KeyCode::Delete,
        "End" => KeyCode::End,
        "Help" => KeyCode::Help,
        "Home" => KeyCode::Home,
        "Insert" => KeyCode::Insert,
        "PageDown" => KeyCode::PageDown,
        "PageUp" => KeyCode::PageUp,
        "ArrowDown" => KeyCode::ArrowDown,
        "ArrowLeft" => KeyCode::ArrowLeft,
        "ArrowRight" => KeyCode::ArrowRight,
        "ArrowUp" => KeyCode::ArrowUp,
        "NumLock" => KeyCode::NumLock,
        "Numpad0" => KeyCode::Numpad0,
        "Numpad1" => KeyCode::Numpad1,
        "Numpad2" => KeyCode::Numpad2,
        "Numpad3" => KeyCode::Numpad3,
        "Numpad4" => KeyCode::Numpad4,
        "Numpad5" => KeyCode::Numpad5,
        "Numpad6" => KeyCode::Numpad6,
        "Numpad7" => KeyCode::Numpad7,
        "Numpad8" => KeyCode::Numpad8,
        "Numpad9" => KeyCode::Numpad9,
        "NumpadAdd" => KeyCode::NumpadAdd,
        "NumpadBackspace" => KeyCode::NumpadBackspace,
        "NumpadClear" => KeyCode::NumpadClear,
        "NumpadClearEntry" => KeyCode::NumpadClearEntry,
        "NumpadComma" => KeyCode::NumpadComma,
        "NumpadDecimal" => KeyCode::NumpadDecimal,
        "NumpadDivide" => KeyCode::NumpadDivide,
        "NumpadEnter" => KeyCode::NumpadEnter,
        "NumpadEqual" => KeyCode::NumpadEqual,
        "NumpadHash" => KeyCode::NumpadHash,
        "NumpadMemoryAdd" => KeyCode::NumpadMemoryAdd,
        "NumpadMemoryClear" => KeyCode::NumpadMemoryClear,
        "NumpadMemoryRecall" => KeyCode::NumpadMemoryRecall,
        "NumpadMemoryStore" => KeyCode::NumpadMemoryStore,
        "NumpadMemorySubtract" => KeyCode::NumpadMemorySubtract,
        "NumpadMultiply" => KeyCode::NumpadMultiply,
        "NumpadParenLeft" => KeyCode::NumpadParenLeft,
        "NumpadParenRight" => KeyCode::NumpadParenRight,
        "NumpadStar" => KeyCode::NumpadStar,
        "NumpadSubtract" => KeyCode::NumpadSubtract,
        "Escape" => KeyCode::Escape,
        "Fn" => KeyCode::Fn,
        "FnLock" => KeyCode::FnLock,
        "PrintScreen" => KeyCode::PrintScreen,
        "ScrollLock" => KeyCode::ScrollLock,
        "Pause" => KeyCode::Pause,
        "BrowserBack" => KeyCode::BrowserBack,
        "BrowserFavorites" => KeyCode::BrowserFavorites,
        "BrowserForward" => KeyCode::BrowserForward,
        "BrowserHome" => KeyCode::BrowserHome,
        "BrowserRefresh" => KeyCode::BrowserRefresh,
        "BrowserSearch" => KeyCode::BrowserSearch,
        "BrowserStop" => KeyCode::BrowserStop,
        "Eject" => KeyCode::Eject,
        "LaunchApp1" => KeyCode::LaunchApp1,
        "LaunchApp2" => KeyCode::LaunchApp2,
        "LaunchMail" => KeyCode::LaunchMail,
        "MediaPlayPause" => KeyCode::MediaPlayPause,
        "MediaSelect" => KeyCode::MediaSelect,
        "MediaStop" => KeyCode::MediaStop,
        "MediaTrackNext" => KeyCode::MediaTrackNext,
        "MediaTrackPrevious" => KeyCode::MediaTrackPrevious,
        "Power" => KeyCode::Power,
        "Sleep" => KeyCode::Sleep,
        "AudioVolumeDown" => KeyCode::AudioVolumeDown,
        "AudioVolumeMute" => KeyCode::AudioVolumeMute,
        "AudioVolumeUp" => KeyCode::AudioVolumeUp,
        "WakeUp" => KeyCode::WakeUp,
        "Meta" => KeyCode::Meta,
        "Hyper" => KeyCode::Hyper,
        "Turbo" => KeyCode::Turbo,
        "Abort" => KeyCode::Abort,
        "Resume" => KeyCode::Resume,
        "Suspend" => KeyCode::Suspend,
        "Again" => KeyCode::Again,
        "Copy" => KeyCode::Copy,
        "Cut" => KeyCode::Cut,
        "Find" => KeyCode::Find,
        "Open" => KeyCode::Open,
        "Paste" => KeyCode::Paste,
        "Props" => KeyCode::Props,
        "Select" => KeyCode::Select,
        "Undo" => KeyCode::Undo,
        "Hiragana" => KeyCode::Hiragana,
        "Katakana" => KeyCode::Katakana,
        "F1" => KeyCode::F1,
        "F2" => KeyCode::F2,
        "F3" => KeyCode::F3,
        "F4" => KeyCode::F4,
        "F5" => KeyCode::F5,
        "F6" => KeyCode::F6,
        "F7" => KeyCode::F7,
        "F8" => KeyCode::F8,
        "F9" => KeyCode::F9,
        "F10" => KeyCode::F10,
        "F11" => KeyCode::F11,
        "F12" => KeyCode::F12,
        "F13" => KeyCode::F13,
        "F14" => KeyCode::F14,
        "F15" => KeyCode::F15,
        "F16" => KeyCode::F16,
        "F17" => KeyCode::F17,
        "F18" => KeyCode::F18,
        "F19" => KeyCode::F19,
        "F20" => KeyCode::F20,
        "F21" => KeyCode::F21,
        "F22" => KeyCode::F22,
        "F23" => KeyCode::F23,
        "F24" => KeyCode::F24,
        "F25" => KeyCode::F25,
        "F26" => KeyCode::F26,
        "F27" => KeyCode::F27,
        "F28" => KeyCode::F28,
        "F29" => KeyCode::F29,
        "F30" => KeyCode::F30,
        "F31" => KeyCode::F31,
        "F32" => KeyCode::F32,
        "F33" => KeyCode::F33,
        "F34" => KeyCode::F34,
        "F35" => KeyCode::F35,
        _ => return None,
    };
    Some(key)
}
